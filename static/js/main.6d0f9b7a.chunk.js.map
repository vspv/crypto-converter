{"version":3,"sources":["components/CryptoTable/index.tsx","components/ConverterBlock/index.tsx","styles.ts","App.tsx","stores/converterStore.ts","stores/index.ts","stores/currenciesStore.ts","index.tsx"],"names":["CryptoTable","inject","observer","classes","currenciesStore","converterStore","items","getItems","diffObj","getDiffObj","React","useEffect","fetchCoins","setInterval","TableContainer","component","Paper","Table","className","table","aria-label","TableHead","TableRow","TableCell","align","TableBody","length","map","coin","onClick","setSelectedCoin","onClickRow","rowCurrency","hover","key","name","currencyIcon","src","imageUrl","alt","fullName","price","volume24Hour","reducer","state","action","type","payload","value","String","Number","inPrice","outPrice","in","out","ConverterBlock","useState","selectedOutCoin","setSelectedOutCoin","coins","getSelectedCoin","find","obj","useReducer","value1","value2","dispatch","paper","cryptoInputBox","FormControl","currencyInput","TextField","onChange","e","target","label","currencyType","InputLabel","shrink","id","Select","MenuItem","useStyles","makeStyles","theme","createStyles","root","padding","spacing","textAlign","color","palette","text","secondary","marginTop","marginBottom","minWidth","marginRight","width","height","borderRadius","redColumn","backgroundColor","greenColumn","cursor","App","Container","maxWidth","Grid","container","item","xs","ConverterStore","this","selectedCoin","observable","computed","stores","arr1","arr2","filter","index","diffCurrencies","reduce","initObj","newObj","o","oldObj","itemObj","setTimeout","axios","get","then","data","Data","CoinInfo","Name","FullName","ImageUrl","RAW","USD","PRICE","toFixed","parseInt","VOLUME24HOUR","setItems","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sTAqFeA,EAhEKC,YAChB,kBACA,iBAFgBA,CAIhBC,aAAS,YAA+D,IAA7DC,EAA4D,EAA5DA,QAASC,EAAmD,EAAnDA,gBAAiBC,EAAkC,EAAlCA,eAC3BC,EAAiBF,EAAiBG,SAClCC,EAAqBJ,EAAiBK,WAE5CC,IAAMC,WAAU,WACRP,IACAA,EAAgBQ,aAChBC,aAAY,WACRT,EAAgBQ,eACjB,QAER,IAQH,OACI,kBAACE,EAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACC,EAAA,EAAD,CAAOC,UAAWf,EAAQgB,MAAOC,aAAW,gBACxC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,QACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,YACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,SACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,kBAGR,kBAACC,EAAA,EAAD,KACMnB,EAAMoB,OAEFpB,EAAMqB,KAAI,SAACC,GAAD,OACR,kBAACN,EAAA,EAAD,CACIO,QAAS,kBAvBlB,SAACD,GACZvB,GACAA,EAAeyB,gBAAgBF,GAqBIG,CAAWH,IAC1BV,UAAWf,EAAQ6B,YACnBC,OAAK,EACLC,IAAKN,EAAKO,MACV,kBAACZ,EAAA,EAAD,KACI,yBAAKL,UAAWf,EAAQiC,aAAcC,IAAKT,EAAKU,SAAUC,IAAI,eAElE,kBAAChB,EAAA,EAAD,CAAWC,MAAM,QAAQI,EAAKO,MAC9B,kBAACZ,EAAA,EAAD,CAAWC,MAAM,QAAQI,EAAKY,UAC9B,kBAACjB,EAAA,EAAD,CACIL,UAAWV,EAAQoB,EAAKO,OAAShC,EAAQ,GAAD,OAAIK,EAAQoB,EAAKO,MAAjB,WACxCX,MAAM,QAFV,IAGMI,EAAKa,OAEX,kBAAClB,EAAA,EAAD,CAAWC,MAAM,QAAjB,IAA0BI,EAAKc,kBAjBrC,6D,qEC1B9B,SAASC,EAAQC,EAAsBC,GAA6B,IAAD,EAC/D,OAAQA,EAAOC,MACX,IAAK,YACD,OAAO,eACAF,GADP,mBAEKC,EAAOE,QAAQZ,KAAOU,EAAOE,QAAQC,OAF1C,uBAGYC,OAAQC,OAAOL,EAAOE,QAAQC,OAASJ,EAAMO,QAAWP,EAAMQ,WAH1E,IAMJ,IAAK,aACD,OAAO,eACAR,EADP,CAEIO,QAASN,EAAOE,QAAQM,GACxBD,SAAUP,EAAOE,QAAQO,MAGjC,QACI,OAAOV,GAInB,IAkFeW,EAlFmCtD,YAC9C,kBACA,iBAF8CA,CAI9CC,aAAS,YAAiD,IAAD,EAA9CC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,gBAAiBC,EAAoB,EAApBA,eAAoB,EACPK,IAAM8C,SAAS,OADR,mBAC9CC,EAD8C,KAC7BC,EAD6B,KAE/CC,EAAkBvD,EAAiBG,SAASoB,KAAI,SAAAC,GAAI,OAAIA,EAAKO,QAC7DgB,EAAUD,OAAM,OAAC7C,QAAD,IAACA,OAAD,EAACA,EAAgBuD,gBAAgBnB,QAAU,EAC3DW,EACFF,OAAM,UAAC9C,EAAiBG,SAASsD,MAAK,SAAAC,GAAG,OAAIA,EAAI3B,OAASsB,YAApD,aAAC,EAAqEhB,QAAU,EALrC,EAM3B/B,IAAMqD,WAAWpB,EAAS,CAChDqB,OAAQ,GACRC,OAAQ,GACRd,UACAC,aAViD,mBAM9CR,EAN8C,KAMvCsB,EANuC,KAarDxD,IAAMC,WAAU,WACZuD,EAAS,CACLpB,KAAM,aACNC,QAAS,CACLM,GAAIF,EACJG,IAAKF,OAGd,CAACD,EAASC,IAYb,OACI,kBAACpC,EAAA,EAAD,CAAOE,UAAWf,EAAQgE,OACtB,yBAAKjD,UAAWf,EAAQiE,gBACpB,kBAACC,EAAA,EAAD,CAAanD,UAAWf,EAAQmE,eAC5B,kBAACC,EAAA,EAAD,CACIzB,KAAK,SACLE,MAAOJ,EAAMoB,OACbQ,SAAU,SAACC,GAAD,OAjBPtC,EAiBiC,SAjBnBa,EAiB6ByB,EAAEC,OAAO1B,WAhBvEkB,EAAS,CACLpB,KAAM,YACNC,QAAS,CACLZ,OACAa,WALU,IAACb,EAAca,GAkBjB2B,MAAM,oCAGd,kBAACN,EAAA,EAAD,CAAanD,UAAWf,EAAQyE,cAC5B,kBAACC,EAAA,EAAD,CAAYC,QAAM,EAACC,GAAG,8CAAtB,wCAGA,kBAACC,EAAA,EAAD,CAAQhC,OAAqB,OAAd3C,QAAc,IAAdA,OAAA,EAAAA,EAAgBuD,gBAAgBzB,OAAQ,IAClDwB,EAAMhC,KAAI,SAAAQ,GAAI,OACX,kBAAC8C,EAAA,EAAD,CAAUjC,MAAOb,GAAOA,SAKxC,yBAAKjB,UAAWf,EAAQiE,gBACpB,kBAACC,EAAA,EAAD,CAAanD,UAAWf,EAAQmE,eAC5B,kBAACC,EAAA,EAAD,CAAWzB,KAAK,SAASE,MAAOJ,EAAMqB,OAAQU,MAAM,oCAExD,kBAACN,EAAA,EAAD,CAAanD,UAAWf,EAAQyE,cAC5B,kBAACC,EAAA,EAAD,CAAYC,QAAM,EAACC,GAAG,8CAAtB,wCAGA,kBAACC,EAAA,EAAD,CACIR,SAAU,SAAAC,GAAC,OAAIf,EAAmBe,EAAEC,OAAO1B,QAC3CA,MAAOS,GACP,kBAACwB,EAAA,EAAD,CAAUjC,MAAM,OAAhB,OACCW,EAAMhC,KAAI,SAAAQ,GAAI,OACX,kBAAC8C,EAAA,EAAD,CAAUjC,MAAOb,GAAOA,c,kBClFzC+C,EAzCGC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,QAASH,EAAMI,QAAQ,KAE3BrB,MAAO,CACHoB,QAASH,EAAMI,QAAQ,GACvBC,UAAW,SACXC,MAAON,EAAMO,QAAQC,KAAKC,WAE9BzB,eAAgB,CACZ0B,UAAW,GACXC,aAAc,IAElBzB,cAAe,CACX0B,SAAU,iBACVC,YAAa,IAEjBrB,aAAc,CACVoB,SAAU,OAEd7E,MAAO,CACH6E,SAAU,KAEd5D,aAAc,CACV8D,MAAO,GACPC,OAAQ,GACRC,aAAc,IAElBC,UAAW,CACPC,gBAAiB,WAErBC,YAAa,CACTD,gBAAiB,WAErBtE,YAAa,CACTwE,OAAQ,gBCdLC,I,cAAAA,EAjBf,WACI,IAAMtG,EAAe+E,IAErB,OACI,kBAACwB,EAAA,EAAD,CAAWxF,UAAWf,EAAQmF,KAAMqB,SAAS,MACzC,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACrB,QAAS,GACrB,kBAACoB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAa5G,QAASA,KAE1B,kBAACyG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAgB5G,QAASA,Q,+CCM9B6G,G,kJARKpF,GACZqF,KAAKC,aAAe,CAChB/E,KAAMP,EAAKO,KACXM,MAAOb,EAAKa,S,sCAPhB,OAAOwE,KAAKC,iB,+CAPfC,K,wEAAiD,CAC9ChF,KAAM,GACNM,MAAO,M,2CAGV2E,K,uHAKAvE,K,gGCNUwE,EALA,CACXjH,gBAAiB,I,uPCyDFkH,EAAeC,GAC1B,OAAOD,EAAKE,QAAO,SAAC1D,EAAK2D,GACrB,OAAI3D,EAAIrB,QAAU8E,EAAKE,GAAOhF,W,+BAnDlC,OAAOwE,KAAK3G,Q,iCAKZ,OAAO2G,KAAKzG,Y,wCAVf2G,K,wEAAoC,M,qCACpCA,K,wEAAwC,M,oCAExCC,K,2GAKAA,K,6GAKAvE,K,oFACU,SAACvC,GACR,EAAKE,QAAU,EAAKkH,eAAe,EAAKpH,MAAOA,GAAOqH,QAClD,SAACC,EAAoB9D,GACjB,IAAM+D,EAAgBvH,EAAMuD,MAAK,SAAAiE,GAAC,OAAIA,EAAE3F,OAAS2B,EAAI3B,QAC/C4F,EAAgB,EAAKzH,MAAMuD,MAAK,SAAAmE,GAAO,OAAIA,EAAQ7F,OAAS0F,EAAO1F,QACnEuD,EACFmC,EAAOpF,QAAUsF,EAAOtF,MAAQ,GAAKoF,EAAOpF,MAAQsF,EAAOtF,MAAQ,QAAU,MAIjF,OAFAmF,EAAQC,EAAO1F,MAAQuD,EAEhBkC,IAEX,IAEJ,EAAKtH,MAAQA,EACb2H,YAAW,WACP,EAAKzH,QAAU,KAChB,S,wCAGNqC,K,oFACY,WACTqF,IACKC,IAAI,6EACJC,MAAK,YAAe,IACXzE,EADU,EAAX0E,KACuBC,KAAK3G,KAAI,SAACC,GAQlC,MAPmB,CACfO,KAAMP,EAAK2G,SAASC,KACpBhG,SAAUZ,EAAK2G,SAASE,SACxBnG,SAAS,iCAAD,OAAmCV,EAAK2G,SAASG,UACzDjG,MAAOb,EAAK+G,IAAIC,IAAIC,MAAMC,QAAQ,GAClCpG,aAAcqG,SAASnH,EAAK+G,IAAIC,IAAII,kBAI5C,EAAKC,SAAStF,GACd0D,EAAOhH,eAAeyB,gBAAgB6B,EAAM,W,GDpDxDtD,eAAgB,IAAI2G,G,MEIxBkC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAa/B,EACV,kBAAC,EAAD,QAGRgC,SAASC,eAAe,W","file":"static/js/main.6d0f9b7a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {observer, inject} from 'mobx-react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport {TCoin, TCoinDiff} from '../../types';\r\nimport ConverterStore from '../../stores/converterStore';\r\nimport CurrenciesStore from '../../stores/currenciesStore';\r\n\r\ntype ICryptoTable = {\r\n    classes: any;\r\n    currenciesStore?: CurrenciesStore;\r\n    converterStore?: ConverterStore;\r\n};\r\n\r\nconst CryptoTable = inject(\r\n    'currenciesStore',\r\n    'converterStore',\r\n)(\r\n    observer(({classes, currenciesStore, converterStore}: ICryptoTable) => {\r\n        const items: TCoin[] = currenciesStore!.getItems;\r\n        const diffObj: TCoinDiff = currenciesStore!.getDiffObj;\r\n\r\n        React.useEffect(() => {\r\n            if (currenciesStore) {\r\n                currenciesStore.fetchCoins();\r\n                setInterval(() => {\r\n                    currenciesStore.fetchCoins();\r\n                }, 30 * 1000);\r\n            }\r\n        }, []);\r\n\r\n        const onClickRow = (coin: TCoin) => {\r\n            if (converterStore) {\r\n                converterStore.setSelectedCoin(coin);\r\n            }\r\n        };\r\n\r\n        return (\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            <TableCell align=\"left\">Name</TableCell>\r\n                            <TableCell align=\"left\">FullName</TableCell>\r\n                            <TableCell align=\"left\">Price</TableCell>\r\n                            <TableCell align=\"left\">volume24hour</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {!items.length\r\n                            ? 'Загрузка...'\r\n                            : items.map((coin: TCoin) => (\r\n                                <TableRow\r\n                                    onClick={() => onClickRow(coin)}\r\n                                    className={classes.rowCurrency}\r\n                                    hover\r\n                                    key={coin.name}>\r\n                                    <TableCell>\r\n                                        <img className={classes.currencyIcon} src={coin.imageUrl} alt=\"Coin icon\"/>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">{coin.name}</TableCell>\r\n                                    <TableCell align=\"left\">{coin.fullName}</TableCell>\r\n                                    <TableCell\r\n                                        className={diffObj[coin.name] && classes[`${diffObj[coin.name]}Column`]}\r\n                                        align=\"left\">\r\n                                        ${coin.price}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">${coin.volume24Hour}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        );\r\n    }),\r\n);\r\n\r\nexport default CryptoTable;","import React from 'react';\r\nimport {observer, inject} from 'mobx-react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport CurrenciesStore from '../../stores/currenciesStore';\r\nimport ConverterStore from '../../stores/converterStore';\r\n\r\ntype IConverterBlock = {\r\n    classes: any;\r\n    currenciesStore?: CurrenciesStore;\r\n    converterStore?: ConverterStore;\r\n};\r\n\r\ntype TReducerState = {\r\n    value1: string;\r\n    value2: string;\r\n    inPrice: number;\r\n    outPrice: number;\r\n};\r\n\r\ntype TSetValue1Action = {\r\n    type: string;\r\n    payload: string;\r\n};\r\n\r\ntype TAction = TSetValue1Action;\r\n\r\nfunction reducer(state: TReducerState, action: any): TReducerState {\r\n    switch (action.type) {\r\n        case 'SET_VALUE':\r\n            return {\r\n                ...state,\r\n                [action.payload.name]: action.payload.value,\r\n                value2: String((Number(action.payload.value) * state.inPrice) / state.outPrice),\r\n            };\r\n\r\n        case 'SET_PRICES':\r\n            return {\r\n                ...state,\r\n                inPrice: action.payload.in,\r\n                outPrice: action.payload.out,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst ConverterBlock: React.FC<IConverterBlock> = inject(\r\n    'currenciesStore',\r\n    'converterStore',\r\n)(\r\n    observer(({classes, currenciesStore, converterStore}) => {\r\n        const [selectedOutCoin, setSelectedOutCoin] = React.useState('USD');\r\n        const coins: string[] = currenciesStore!.getItems.map(coin => coin.name);\r\n        const inPrice = Number(converterStore?.getSelectedCoin.price) || 0;\r\n        const outPrice =\r\n            Number(currenciesStore!.getItems.find(obj => obj.name === selectedOutCoin)?.price) || 0;\r\n        const [state, dispatch] = React.useReducer(reducer, {\r\n            value1: '',\r\n            value2: '',\r\n            inPrice,\r\n            outPrice,\r\n        });\r\n\r\n        React.useEffect(() => {\r\n            dispatch({\r\n                type: 'SET_PRICES',\r\n                payload: {\r\n                    in: inPrice,\r\n                    out: outPrice,\r\n                },\r\n            });\r\n        }, [inPrice, outPrice]);\r\n\r\n        const onUpdateField = (name: string, value: string) => {\r\n            dispatch({\r\n                type: 'SET_VALUE',\r\n                payload: {\r\n                    name,\r\n                    value,\r\n                },\r\n            });\r\n        };\r\n\r\n        return (\r\n            <Paper className={classes.paper}>\r\n                <div className={classes.cryptoInputBox}>\r\n                    <FormControl className={classes.currencyInput}>\r\n                        <TextField\r\n                            type=\"number\"\r\n                            value={state.value1}\r\n                            onChange={(e: any) => onUpdateField('value1', e.target.value)}\r\n                            label=\"Сумма\"\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl className={classes.currencyType}>\r\n                        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                            Валюта\r\n                        </InputLabel>\r\n                        <Select value={converterStore?.getSelectedCoin.name || ''}>\r\n                            {coins.map(name => (\r\n                                <MenuItem value={name}>{name}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n                <div className={classes.cryptoInputBox}>\r\n                    <FormControl className={classes.currencyInput}>\r\n                        <TextField type=\"number\" value={state.value2} label=\"Сумма\"/>\r\n                    </FormControl>\r\n                    <FormControl className={classes.currencyType}>\r\n                        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                            Валюта\r\n                        </InputLabel>\r\n                        <Select\r\n                            onChange={e => setSelectedOutCoin(e.target.value as string)}\r\n                            value={selectedOutCoin}>\r\n                            <MenuItem value=\"USD\">USD</MenuItem>\r\n                            {coins.map(name => (\r\n                                <MenuItem value={name}>{name}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n            </Paper>\r\n        );\r\n    }),\r\n);\r\n\r\nexport default ConverterBlock;","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            padding: theme.spacing(10),\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n        cryptoInputBox: {\r\n            marginTop: 20,\r\n            marginBottom: 20,\r\n        },\r\n        currencyInput: {\r\n            minWidth: 'calc(70%-10px)',\r\n            marginRight: 10,\r\n        },\r\n        currencyType: {\r\n            minWidth: '30%',\r\n        },\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n        currencyIcon: {\r\n            width: 18,\r\n            height: 18,\r\n            borderRadius: 30\r\n        },\r\n        redColumn: {\r\n            backgroundColor: '#ffdada',\r\n        },\r\n        greenColumn: {\r\n            backgroundColor: '#d8ffc4',\r\n        },\r\n        rowCurrency: {\r\n            cursor: 'pointer'\r\n        }\r\n    }),\r\n);\r\n\r\nexport default useStyles;","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\n\nimport {CryptoTable, ConverterBlock} from './components';\nimport useStyles from './styles';\n\nfunction App() {\n    const classes: any = useStyles();\n\n    return (\n        <Container className={classes.root} maxWidth=\"lg\">\n            <Grid container spacing={3}>\n                <Grid item xs={8}>\n                    <CryptoTable classes={classes}/>\n                </Grid>\n                <Grid item xs={4}>\n                    <ConverterBlock classes={classes}/>\n                </Grid>\n            </Grid>\n        </Container>\n    );\n}\n\nexport default App;\n","import { observable, computed, action } from 'mobx';\r\nimport { TCoin, TSelectedCoin } from '../types';\r\n\r\nclass ConverterStore {\r\n    @observable private selectedCoin: TSelectedCoin = {\r\n        name: '',\r\n        price: 0,\r\n    };\r\n\r\n    @computed\r\n    get getSelectedCoin() {\r\n        return this.selectedCoin;\r\n    }\r\n\r\n    @action\r\n    setSelectedCoin(coin: TCoin) {\r\n        this.selectedCoin = {\r\n            name: coin.name,\r\n            price: coin.price,\r\n        };\r\n    }\r\n}\r\n\r\nexport default ConverterStore;","import ConverterStore from \"./converterStore\";\r\nimport CurrenciesStore from \"./currenciesStore\";\r\n\r\nconst stores = {\r\n    currenciesStore: new CurrenciesStore(),\r\n    converterStore: new ConverterStore(),\r\n}\r\n\r\nexport default stores;","import axios from 'axios';\r\nimport { observable, computed, action } from 'mobx';\r\nimport { TCoin, TCoinDiff } from '../types';\r\n\r\nimport stores from '../stores';\r\n\r\nclass CurrenciesStore {\r\n    @observable private items: TCoin[] = [];\r\n    @observable private diffObj: TCoinDiff = {};\r\n\r\n    @computed\r\n    get getItems() {\r\n        return this.items;\r\n    }\r\n\r\n    @computed\r\n    get getDiffObj() {\r\n        return this.diffObj;\r\n    }\r\n\r\n    @action\r\n    setItems = (items: TCoin[]): void => {\r\n        this.diffObj = this.diffCurrencies(this.items, items).reduce(\r\n            (initObj: TCoinDiff, obj: TCoin) => {\r\n                const newObj: TCoin = items.find(o => o.name === obj.name)!;\r\n                const oldObj: TCoin = this.items.find(itemObj => itemObj.name === newObj.name)!;\r\n                const color: string =\r\n                    newObj.price === oldObj.price ? '' : newObj.price > oldObj.price ? 'green' : 'red';\r\n\r\n                initObj[newObj.name] = color;\r\n\r\n                return initObj;\r\n            },\r\n            {},\r\n        );\r\n        this.items = items;\r\n        setTimeout(() => {\r\n            this.diffObj = {};\r\n        }, 10000);\r\n    };\r\n\r\n    @action\r\n    fetchCoins = () => {\r\n        axios\r\n            .get('https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD')\r\n            .then(({ data }) => {\r\n                const coins: TCoin[] = data.Data.map((coin: any) => {\r\n                    const obj: TCoin = {\r\n                        name: coin.CoinInfo.Name,\r\n                        fullName: coin.CoinInfo.FullName,\r\n                        imageUrl: `https://www.cryptocompare.com/${coin.CoinInfo.ImageUrl}`,\r\n                        price: coin.RAW.USD.PRICE.toFixed(3),\r\n                        volume24Hour: parseInt(coin.RAW.USD.VOLUME24HOUR),\r\n                    };\r\n                    return obj;\r\n                });\r\n                this.setItems(coins);\r\n                stores.converterStore.setSelectedCoin(coins[0]);\r\n            });\r\n    };\r\n\r\n    diffCurrencies(arr1: TCoin[], arr2: TCoin[]) {\r\n        return arr1.filter((obj, index) => {\r\n            if (obj.price !== arr2[index].price) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n}\r\n\r\nexport default CurrenciesStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'mobx-react';\n\nimport stores from \"./stores\";\n\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider {...stores}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}